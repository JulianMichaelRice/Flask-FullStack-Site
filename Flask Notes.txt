| The Request Object
Accessing Query String (GET)
request.args.get(<field_name>)
request.args[<field_name>]

Accessing Form Data (POST)
request.form.get(<field_name>)
request.form[<field_name>]

| The Response Object
class flask.Response(
	response = None,
	status = None,
	headers = None,
	mimetype = None,
	content_type = None,
	direct_passthrough = False
)
*Most commonly used arguments: response, mimetype, and content_type

'pip freeze > requirements.txt'

Updates our list with what we require for this

| Setting up a MongoDB Database
MONGODB_SETTINGS = { 'db' : 'UTA_Enrollment' }

| Importing the MongoEngine
from flask_mongoengine import MongoEngine

|Initializing the database object
db = MongoEnigne()
db.init_app(app)

| Run Database on Terminal
/Users/julianrice/Downloads/mongodb-macos-x86_64-4.2.1/bin/mongod

| MongoDB Shell Commands
db.createCollection(<collection>)
db.<collection>.insert( {...} )
db.<collection>.insertMany( {...} )

| Import JSON Data using MongoImport.exe/Com Line
mongoimport --db <DB> -collection <collection> --file <file>
mongoimport -d <DB> -c <collection> --file <file>

| Data Model Creation (Python)
class ModelName(db.Document):
	field1 = db.IntField()
	field2 = db.StringField()
	...
	fieldn = db.StringField()

/Users/julianrice/Downloads/mongodb-macos-x86_64-4.2.1/bin/mongoimport --jsonArray --db UTA_Enrollment --collection user --file /Users/julianrice/Downloads/Ex_Files_Full_Stack_Dev_Flask/Exercise\ Files/models/users.json 

| WTForms Examples
- WTFORMS Python -
class LoginForm(FlaskForm):
	email = StringField('Email')
	password = StringField('Password')
	submit = SubmitField('Login')

- WTFORMS - (login.html etc)
<form>
	{{ form.hidden_tag() }}
	{{ form.username }}
	{{ form.email }}
	{{ form.password }}
</form>

- STANDARD HTML FORM -
<form>
	<input 	id = "csrf_token"
			type = "hidden"
			name = "csrf_token"
			value = "ImFmMzg50...GU4Yjkw">
	<input type = "text" name = "username">
	<input type = "email" name = "email">
	<input type = "password" name = "password">
</form>

| Flask-Security Extension
Provides common security and authentication features:
• Session-based authentication
• Password hashing
• Basic HTTP and token-based authentications
• User registration
• Login tracking (Flask-Login)
Also supports data persistency for Flask-SQLAlchemy, Flask-MongoEngine, flask-peewee, and PonyORM.

pip freeze > .\requirements.txt

| Werkzeug Library (WSGI Web Application)
Hashing
generate_password_hash('password')

Unhashing
check_password_hash(password, 'password')

| Perform Join Queries on Multiple Collections:
$aggregate

Pipeline Stages
$lookup - performs a left outer join
$match  - filters documents
$unwind - deconstructs an array field
$sort   - sorts a field ascending or descending

| Flask-Session
The *session* object stores information specific to the user. The implementation is on top of cookies and the cookies are signed cryptographically.

session['key'] = value		#Setting a session
session.get('key')			#Getting a session

session.pop('key', None)	#Destroying a sessions
session['key'] = False		#Destroying a session

| Flask-Login Extension
Sessions and state management using Flask-Login
Managing user logged-in state using user_loader()
Using the LoginManager class to manage login state
Logging out with logout_user()
flask-login.readthedocs.io/en/latest

| HTTP Verbs and CRUD Operations
HTTP V
POST	Create	Insert Data
GET		Read	Fetch Data
PUT		Update	Replace existing data
DELETE	Delete	Remove data

Flask-RESTPlus - Adds support for creating REST APIs
Decorate classes and methods with it
Can add multiple endpoints in route() decorator
> pip install flask-restplus
> pip freeze > .\requirements.txt

Postman - API development environment for testing APIs
Most-used REST client in the world

